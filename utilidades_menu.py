# Importaci√≥n de m√≥dulos necesarios para las funcionalidades del sistema
from registro import *  # Importa funciones de registro de usuarios para el proceso de registro
from inicio_sesion import inicio_sesion  # Importa funci√≥n de inicio de sesi√≥n para autenticaci√≥n
from gestion_cuentas.registro_cuentas import *  # Importa funciones de gesti√≥n de cuentas bancarias
from transacciones.transacciones import *  # Importa funciones de transacciones financieras
from bolsillos.bolsillos import *  # Importa funciones de gesti√≥n de bolsillos de ahorro
from divisas.divisas import *  # Importa funciones de conversi√≥n de divisas
from colorama import init, Fore, Back, Style  # Importa m√≥dulos para colores en consola

# Inicializa colorama
init()

# Definici√≥n de men√∫s del sistema con sus opciones correspondientes
menu_principal = f"""
{Fore.CYAN}***** {Fore.YELLOW}üí∞ Bienvenido a Campers Wallet üí∞{Fore.CYAN} *****{Style.RESET_ALL}
{Fore.GREEN}1. üë§ Iniciar Sesi√≥n{Style.RESET_ALL}
{Fore.GREEN}2. üìù Registrarse{Style.RESET_ALL}
{Fore.GREEN}3. üö™ Salir{Style.RESET_ALL}
{Fore.CYAN}***************************************{Style.RESET_ALL}
"""

menu_inicio = f"""
{Fore.CYAN}***************************************{Style.RESET_ALL}
{Fore.GREEN}1. üí≥ Gesti√≥n de Cuentas{Style.RESET_ALL}
{Fore.GREEN}2. üí∞ Transacciones{Style.RESET_ALL}
{Fore.GREEN}3. üè¶ Bolsillos{Style.RESET_ALL}
{Fore.GREEN}4. üí± Conversi√≥n de Divisas{Style.RESET_ALL}
{Fore.GREEN}5. üëã Cerrar Sesi√≥n{Style.RESET_ALL}
{Fore.CYAN}***************************************{Style.RESET_ALL}
"""

menu_gestion_cuentas = f"""
{Fore.CYAN}***************************************{Style.RESET_ALL}
{Fore.GREEN}1. üìù Registrar Cuenta{Style.RESET_ALL}
{Fore.GREEN}2. ‚úèÔ∏è Modificar Cuenta{Style.RESET_ALL}
{Fore.GREEN}3. üóëÔ∏è Eliminar Cuenta{Style.RESET_ALL}
{Fore.GREEN}4. üëÄ Ver Cuentas Registradas{Style.RESET_ALL}
{Fore.GREEN}5. üìä Ver Gastos/Ingresos{Style.RESET_ALL}
{Fore.GREEN}6. üíµ Saldo Total{Style.RESET_ALL}
{Fore.GREEN}7. ‚Ü©Ô∏è Regresar al men√∫ principal{Style.RESET_ALL}
{Fore.CYAN}***************************************{Style.RESET_ALL}
"""

menu_transacciones = f"""
{Fore.CYAN}***************************************{Style.RESET_ALL}
{Fore.GREEN}1. üí∏ Realizar pagos{Style.RESET_ALL}
{Fore.GREEN}2. üí∞ Retirar dinero{Style.RESET_ALL}
{Fore.GREEN}3. üì• Depositar dinero{Style.RESET_ALL}
{Fore.GREEN}4. üìã Movimientos{Style.RESET_ALL}
{Fore.GREEN}5. ‚Ü©Ô∏è Regresar menu principal{Style.RESET_ALL}
{Fore.CYAN}***************************************{Style.RESET_ALL}
"""

menu_bolsillos = f"""
{Fore.CYAN}***************************************{Style.RESET_ALL}
{Fore.GREEN}1. ‚ûï Crear bolsillo{Style.RESET_ALL}
{Fore.GREEN}2. üí∞ Agregar dinero a bolsillo{Style.RESET_ALL}
{Fore.GREEN}3. üí∏ Retirar dinero de bolsillo{Style.RESET_ALL}
{Fore.GREEN}4. üóëÔ∏è Eliminar bolsillo{Style.RESET_ALL}
{Fore.GREEN}5. üëÄ Ver bolsillos{Style.RESET_ALL}
{Fore.GREEN}6. ‚Ü©Ô∏è Regresar menu principal{Style.RESET_ALL}
{Fore.CYAN}***************************************{Style.RESET_ALL}
"""

menu_conversion_divisas = f"""
{Fore.CYAN}***************************************{Style.RESET_ALL}
{Fore.GREEN}1. üá∫üá∏ Convertir de COP a USD (Dolar){Style.RESET_ALL}
{Fore.GREEN}2. üá™üá∫ Convertir de COP a EUR (Euros){Style.RESET_ALL}
{Fore.GREEN}3. üá¨üáß Convertir de COP a GBP (Libras Esterlinas){Style.RESET_ALL}
{Fore.GREEN}4. üáØüáµ Convertir de COP a JPY (Yenes Japoneses){Style.RESET_ALL}
{Fore.GREEN}5. üá®üá¶ Convertir de COP a CAD (Dolares Canadienses){Style.RESET_ALL}
{Fore.GREEN}6. ‚Ü©Ô∏è Regresar menu principal{Style.RESET_ALL}
{Fore.CYAN}***************************************{Style.RESET_ALL}
"""

# Funciones para mostrar los diferentes men√∫s del sistema
def mostrar_menu():
    return print(menu_principal)  # Muestra el men√∫ principal en la consola

def mostrar_menu_inicio():
    return print(menu_inicio)  # Muestra el men√∫ despu√©s del inicio de sesi√≥n

def mostrar_menu_gestion_cuentas():
    return print(menu_gestion_cuentas)  # Muestra el men√∫ de gesti√≥n de cuentas

def mostrar_menu_transacciones():
    return print(menu_transacciones)  # Muestra el men√∫ de transacciones

def mostrar_menu_bolsillos():
    return print(menu_bolsillos)  # Muestra el men√∫ de bolsillos

def mostrar_menu_conversion_divisas():
    return print(menu_conversion_divisas)  # Muestra el men√∫ de conversi√≥n de divisas

# Funci√≥n para solicitar la opci√≥n al usuario
def pedir_opcion():
    return int(input("Bienvenido. Elija una opci√≥n: "))  # Solicita y retorna la opci√≥n elegida por el usuario

# Funci√≥n principal que maneja el men√∫ principal
def ejecucion_menu_principal():
    while True:  # Bucle infinito para mantener el men√∫ activo
        mostrar_menu()  # Muestra el men√∫ principal
        try:
            opc = pedir_opcion()  # Solicita la opci√≥n al usuario
        except ValueError:
            print("Error: Debe ingresar una opci√≥n v√°lida.")  # Maneja errores de entrada
            continue
        match opc:  # Estructura de control para las diferentes opciones
            case 1:
                inicio_sesion()  # Llama a la funci√≥n de inicio de sesi√≥n
            case 2:
                registro()  # Llama a la funci√≥n de registro
            case 3:
                print("Saliendo...")  # Mensaje de salida
                break  # Termina el bucle y cierra el programa
            case _:
                print("Error. Elija una opcion v√°lida")  # Mensaje para opciones inv√°lidas

# Funci√≥n que maneja el men√∫ despu√©s del inicio de sesi√≥n
def ejecucion_menu_inicio(usuario_actual):
    while True:  # Bucle para mantener el men√∫ activo
        mostrar_menu_inicio()  # Muestra el men√∫ de inicio
        try:
            opc_inicio = pedir_opcion()  # Solicita la opci√≥n al usuario
        except ValueError:
            print("Error: Debe ingresar una opci√≥n v√°lida.")  # Maneja errores de entrada
            continue
        match opc_inicio:  # Estructura de control para las diferentes opciones
            case 1:
                ejecucion_menu_gestion_cuentas(usuario_actual)  # Llama al men√∫ de gesti√≥n de cuentas
            case 2:
                ejecucion_menu_transacciones(usuario_actual)  # Llama al men√∫ de transacciones
            case 3:
                ejecucion_menu_bolsillos(usuario_actual)  # Llama al men√∫ de bolsillos
            case 4:
                ejecucion_menu_conversion_divisas()  # Llama al men√∫ de conversi√≥n de divisas
            case 5:
                print("Cerrando sesi√≥n...")  # Mensaje de cierre de sesi√≥n
                break  # Termina el bucle y cierra la sesi√≥n
            case _:
                print("Error. Elija una opcion v√°lida")  # Mensaje para opciones inv√°lidas

# Funci√≥n que maneja el men√∫ de gesti√≥n de cuentas
def ejecucion_menu_gestion_cuentas(usuario_actual):
    while True:  # Bucle para mantener el men√∫ activo
        mostrar_menu_gestion_cuentas()  # Muestra el men√∫ de gesti√≥n de cuentas
        try:
            opc_gestion_cuentas = pedir_opcion()  # Solicita la opci√≥n al usuario
        except ValueError:
            print("Error: Debe ingresar una opci√≥n v√°lida.")  # Maneja errores de entrada
            continue
        match opc_gestion_cuentas:  # Estructura de control para las diferentes opciones
            case 1:
                registrar_cuentas(usuario_actual)  # Llama a la funci√≥n de registro de cuentas
            case 2:
                modificar_cuenta(usuario_actual)  # Llama a la funci√≥n de modificaci√≥n de cuentas
            case 3:
                eliminar_cuenta(usuario_actual)  # Llama a la funci√≥n de eliminaci√≥n de cuentas
            case 4:
                ver_cuentas_registradas(usuario_actual)  # Llama a la funci√≥n de visualizaci√≥n de cuentas
            case 5:
                ver_gastos_ingresos_usuario(usuario_actual)  # Llama a la funci√≥n de visualizaci√≥n de gastos/ingresos
            case 6:
                ver_saldo_total(usuario_actual)  # Llama a la funci√≥n de visualizaci√≥n de saldo total
            case 7:
                break  # Regresa al men√∫ anterior
            case _:
                print("Error. Elija una opcion v√°lida")  # Mensaje para opciones inv√°lidas

# Funci√≥n que maneja el men√∫ de transacciones
def ejecucion_menu_transacciones(usuario_actual):
    while True:  # Bucle para mantener el men√∫ activo
        mostrar_menu_transacciones()  # Muestra el men√∫ de transacciones
        try:
            opc_transacciones = pedir_opcion()  # Solicita la opci√≥n al usuario
        except ValueError:
            print("Error: Debe ingresar una opci√≥n v√°lida.")  # Maneja errores de entrada
            continue
        match opc_transacciones:  # Estructura de control para las diferentes opciones
            case 1:
                realizar_pago(usuario_actual)  # Llama a la funci√≥n de realizaci√≥n de pagos
            case 2:
                retirar_dinero(usuario_actual)  # Llama a la funci√≥n de retiro de dinero
            case 3:
                depositar_dinero(usuario_actual)  # Llama a la funci√≥n de dep√≥sito de dinero
            case 4:
                listar_movimientos(usuario_actual)  # Llama a la funci√≥n de listado de movimientos
            case 5:
                break  # Regresa al men√∫ anterior
            case _:
                print("Error. Elija una opcion v√°lida")  # Mensaje para opciones inv√°lidas

# Funci√≥n que maneja el men√∫ de bolsillos
def ejecucion_menu_bolsillos(usuario_actual):
    while True:  # Bucle para mantener el men√∫ activo
        mostrar_menu_bolsillos()  # Muestra el men√∫ de bolsillos
        try:
            opc_bolsillos = pedir_opcion()  # Solicita la opci√≥n al usuario
        except ValueError:
            print("Error: Debe ingresar una opci√≥n v√°lida.")  # Maneja errores de entrada
            continue
        match opc_bolsillos:  # Estructura de control para las diferentes opciones
            case 1:
                crear_bolsillo(usuario_actual)  # Llama a la funci√≥n de creaci√≥n de bolsillos
            case 2:
                agregar_dinero_bolsillo(usuario_actual)  # Llama a la funci√≥n de agregar dinero a bolsillos
            case 3:
                retirar_dinero_bolsillo(usuario_actual)  # Llama a la funci√≥n de retiro de dinero de bolsillos
            case 4:
                eliminar_bolsillo(usuario_actual)  # Llama a la funci√≥n de eliminaci√≥n de bolsillos
            case 5:
                listar_bolsillos(usuario_actual)  # Llama a la funci√≥n de listado de bolsillos
            case 6:
                break  # Regresa al men√∫ anterior
            case _:
                print("Error. Elija una opcion v√°lida")  # Mensaje para opciones inv√°lidas

# Funci√≥n que maneja el men√∫ de conversi√≥n de divisas
def ejecucion_menu_conversion_divisas():
    while True:  # Bucle para mantener el men√∫ activo
        mostrar_menu_conversion_divisas()  # Muestra el men√∫ de conversi√≥n de divisas
        try:
            opc_conversion_divisas = pedir_opcion()  # Solicita la opci√≥n al usuario
        except ValueError:
            print("Error: Debe ingresar una opci√≥n v√°lida.")  # Maneja errores de entrada
            continue
        match opc_conversion_divisas:  # Estructura de control para las diferentes opciones
            case 1:
                convertir_cop_a_usd()  # Llama a la funci√≥n de conversi√≥n COP a USD
            case 2:
                convertir_cop_a_eur()  # Llama a la funci√≥n de conversi√≥n COP a EUR
            case 3:
                convertir_cop_a_gbp()  # Llama a la funci√≥n de conversi√≥n COP a GBP
            case 4:
                convertir_cop_a_jpy()  # Llama a la funci√≥n de conversi√≥n COP a JPY
            case 5:
                convertir_cop_a_cad()  # Llama a la funci√≥n de conversi√≥n COP a CAD
            case 6:
                break  # Regresa al men√∫ anterior
            case _:
                print("Error. Elija una opcion v√°lida")  # Mensaje para opciones inv√°lidas